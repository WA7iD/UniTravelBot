import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

PORT = int(os.environ.get('PORT', '8443'))
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")  # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ URL
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not found in environment variables.")
    
webhook_url = os.environ.get("WEBHOOK_URL")
if not webhook_url:
    raise ValueError("WEBHOOK_URL is not found in environment variables.")

# –≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∞
QUESTION1, QUESTION2, QUESTION3 = range(3)

user_scores = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_scores[user_id] = {"med": 0, "art": 0, "biz": 0, "it": 0, "soc": 0}

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üéØ –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?\n"
        "1 ‚Äî –ß–∏—Ç–∞—é –ø—Ä–æ –∑–¥–æ—Ä–æ–≤—å–µ\n"
        "2 ‚Äî –†–∏—Å—É—é –∏–ª–∏ –º–æ–Ω—Ç–∏—Ä—É—é\n"
        "3 ‚Äî –î—É–º–∞—é, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\n"
        "4 ‚Äî –†–∞–∑–±–∏—Ä–∞—é—Å—å —Å —Ç–µ—Ö–Ω–∏–∫–æ–π\n"
        "5 ‚Äî –û–±—â–∞—é—Å—å —Å –ª—é–¥—å–º–∏"
    )
    return QUESTION1

async def question1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å 2: –õ—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —à–∫–æ–ª–µ?\n"
        "1 ‚Äî –ë–∏–æ–ª–æ–≥–∏—è\n"
        "2 ‚Äî –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ / –ò—Å–∫—É—Å—Å—Ç–≤–æ\n"
        "3 ‚Äî –≠–∫–æ–Ω–æ–º–∏–∫–∞\n"
        "4 ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n"
        "5 ‚Äî –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
    )
    return QUESTION2

async def question2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å 3: –ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?\n"
        "1 ‚Äî –ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º\n"
        "2 ‚Äî –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "3 ‚Äî –î–æ—Ö–æ–¥\n"
        "4 ‚Äî –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
        "5 ‚Äî –û–±—â–µ–Ω–∏–µ"
    )
    return QUESTION3

async def question3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    result = get_result(update.effective_user.id)
    await update.message.reply_text(result)
    return ConversationHandler.END

def handle_answer(text, user_id):
    if "1" in text:
        user_scores[user_id]["med"] += 1
    elif "2" in text:
        user_scores[user_id]["art"] += 1
    elif "3" in text:
        user_scores[user_id]["biz"] += 1
    elif "4" in text:
        user_scores[user_id]["it"] += 1
    elif "5" in text:
        user_scores[user_id]["soc"] += 1

def get_result(user_id):
    result_map = {
        "med": "–¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, –±–∏–æ–ª–æ–≥–∏–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ üß¨",
        "art": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π —Å–µ–±—è –≤ –¥–∏–∑–∞–π–Ω–µ, –∏—Å–∫—É—Å—Å—Ç–≤–µ, –∫–∏–Ω–æ üé®",
        "biz": "–¢—ã –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤(–∞). –°—Ç–∞—Ä—Ç–∞–ø—ã, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî —Ç–≤–æ–π –ø—É—Ç—å üíº",
        "it": "–¢—ã —Ç–µ—Ö–Ω–∞—Ä—å! –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, AI, –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî —Ç–≤–æ—ë üëæ",
        "soc": "–¢—ã –¥—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏! –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, HR, —Å–æ—Ü–∏–æ–ª–æ–≥–∏—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π üó£Ô∏è"
    }
    scores = user_scores[user_id]
    top = max(scores, key=scores.get)
    return result_map[top]

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, question1)],
            QUESTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, question2)],
            QUESTION3: [MessageHandler(filters.TEXT & ~filters.COMMAND, question3)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook (–¥–ª—è Render)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url
    )

if __name__ == '__main__':
    main()
