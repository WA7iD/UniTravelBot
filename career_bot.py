import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥–∞–º
city_data = {
    "–ü—è—Ç–∏–≥–æ—Ä—Å–∫": {
        "–æ–∫—Ä—É–≥": "–°–ö–§–û",
        "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "–≠–∫–æ–Ω–æ–º–∏–∫–∞"],
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü—è—Ç–∏–≥–æ—Ä—Å–∫ ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫—Ä—É—Ç—ã–µ –∫—É—Ä–æ—Ä—Ç—ã –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤ –º–µ–¥–∏—Ü–∏–Ω–µ! üòé‚ú® –ó–¥–µ—Å—å —Ç—ã –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è –≤ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –Ω–æ –∏ —Å–º–æ–∂–µ—à—å –≤–¥–æ—Ö–Ω—É—Ç—å —Å–≤–µ–∂–∏–π –≥–æ—Ä–Ω—ã–π –≤–æ–∑–¥—É—Ö, –æ—Ç—Ä—ã–≤–∞—è—Å—å –æ—Ç —Ä—É—Ç–∏–Ω—ã. –°–µ—Ä—å–µ–∑–Ω—ã–µ –≤—É–∑—ã + –∫–∞–π—Ñ–æ–≤–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ = —É–¥–∞—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä—ã. üöÄ",
        "–≤—É–∑—ã": [
            {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–ì–ú–£", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ú–µ–¥–∏—Ü–∏–Ω–∞", "–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"]},
            {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–ì–¢–£", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è", "–¢–µ—Ö–Ω–æ—Å—Ç–∞—Ä—Ç–∞–ø—ã"]}
        ]
    },
    "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å": {
        "–æ–∫—Ä—É–≥": "–°–ö–§–û",
        "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è"],
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å ‚Äî –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∫—Ä—É—Ç—ã–º —é—Ä–∏—Å—Ç–æ–º, –Ω–æ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –ª–∏–¥–µ—Ä–æ–º –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω–µ! üå±‚öñÔ∏è –£—Å–ø–µ–≤–∞–µ—à—å –∏ —É—á–∏—Ç—å—Å—è, –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∂–∏–∑–Ω—å—é. –≠–∫–æ–ª–æ–≥–∏—è, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —é—Ä–∫–∞ ‚Äî –∑–¥–µ—Å—å –µ—Å—Ç—å –≤—Å–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è. üí°",
        "–≤—É–∑—ã": [
            {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –ì–ê–£", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ê–≥—Ä–æ–Ω–æ–º–∏—è", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–≠–∫–æ–ª–æ–≥–∏—è"]},
            {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—É–∫–∏", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"]}
        ]
    },
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": {
        "–æ–∫—Ä—É–≥": "–Æ–§–û",
        "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è"],
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–†–æ—Å—Ç–æ–≤ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—Ä—É–ø–Ω—ã–π —é–∂–Ω—ã–π –≥–æ—Ä–æ–¥, —ç—Ç–æ –º–µ–≥–∞–ø–æ–ª–∏—Å —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! üåûüí• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–≤–æ—é –Ω–∏—à—É –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, –ø–µ–¥–∞–≥–æ–≥–∏–∫–µ –∏–ª–∏ —Å–æ—Ü–∏–æ–ª–æ–≥–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–≥—Ä—É–∑–∏—à—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —é–∂–Ω–æ–≥–æ –¥—Ä–∞–π–≤–∞. –ë–æ–Ω—É—Å: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–ª–∞–≤–∞—Ç—å –≤ —Ä–µ–∫–∞—Ö, –ø–æ–∫–∞ –Ω–µ —Å–µ—Å—Å–∏—è. üòâ",
        "–≤—É–∑—ã": [
            {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–Æ–§–£", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ë–∏–∑–Ω–µ—Å"]},
            {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–†–æ—Å—Ç–ì–ú–£", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è": ["–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ë–∏–æ–ª–æ–≥–∏—è", "–ó–¥–æ—Ä–æ–≤—å–µ"]}
        ]
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
PORT = int(os.environ.get('PORT', '8443'))
webhook_url = os.environ.get("WEBHOOK_URL")

if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not found in environment variables.")

if not webhook_url:
    raise ValueError("WEBHOOK_URL is not found in environment variables.")

# –≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∞
(QUESTION1, QUESTION2, QUESTION3, SELECT_REGION) = range(4)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_scores = {}
user_profiles = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def send_greeting(update, user_id):
    try:
        greeting_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üéØ –î—É–º–∞–ª(–∞) –æ –í–£–ó–µ, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å,"
            "–∞ —Å –≥–æ—Ä–æ–¥–æ–º —Ä–µ—à–∏–ª(–∞)? –î–∞–≤–∞–π, –º—ã —Ç–µ–±—è –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ —Å–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º üòâ\n\n"
            "–ü—Ä–æ–π–¥–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –≤–æ –≤–∑—Ä–æ—Å–ª–æ–º –º–∏—Ä–µ!\n\n"
        )

        message_text = (
            greeting_text +
            f"–í–æ–ø—Ä–æ—Å 1: {questions[0]['q']}\n"
            f"1 ‚Äî {questions[0]['options'][0]['text']}\n"
            f"2 ‚Äî {questions[0]['options'][1]['text']}\n"
            f"3 ‚Äî {questions[0]['options'][2]['text']}\n"
            f"4 ‚Äî {questions[0]['options'][3]['text']}\n"
            f"5 ‚Äî {questions[0]['options'][4]['text']}"
        )

        await update.message.reply_text(message_text)
        return QUESTION1
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        raise

# üîπ –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_id not in user_scores:
        user_scores[user_id] = {
            "med": 0,
            "art": 0,
            "biz": 0,
            "it": 0,
            "soc": 0
        }

    return await send_greeting(update, user_id)

# üîπ –í–æ–ø—Ä–æ—Å—ã
async def question1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å 2: {questions[1]['q']}\n"
        f"1 ‚Äî {questions[1]['options'][0]['text']}\n"
        f"2 ‚Äî {questions[1]['options'][1]['text']}\n"
        f"3 ‚Äî {questions[1]['options'][2]['text']}\n"
        f"4 ‚Äî {questions[1]['options'][3]['text']}\n"
        f"5 ‚Äî {questions[1]['options'][4]['text']}"
    )
    return QUESTION2

async def question2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å 3: {questions[2]['q']}\n"
        f"1 ‚Äî {questions[2]['options'][0]['text']}\n"
        f"2 ‚Äî {questions[2]['options'][1]['text']}\n"
        f"3 ‚Äî {questions[2]['options'][2]['text']}\n"
        f"4 ‚Äî {questions[2]['options'][3]['text']}\n"
        f"5 ‚Äî {questions[2]['options'][4]['text']}"
    )
    return QUESTION3

async def question3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å 4: {questions[3]['q']}\n"
        f"1 ‚Äî {questions[3]['options'][0]['text']}\n"
        f"2 ‚Äî {questions[3]['options'][1]['text']}\n"
        f"3 ‚Äî {questions[3]['options'][2]['text']}\n"
        f"4 ‚Äî {questions[3]['options'][3]['text']}\n"
        f"5 ‚Äî {questions[3]['options'][4]['text']}"
    )
    return SELECT_REGION

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
async def handle_test_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    profile = get_top_profile(user_id)

    if not profile:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

    user_profiles[user_id] = profile  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ä–µ–≥–∏–æ–Ω, –≥–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è!\n"
        "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:"
    )

    reply_keyboard = [['–¶–§–û', '–ü–§–û'], ['–Æ–§–û', '–°–ö–§–û']]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return SELECT_REGION

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
async def select_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_region = update.message.text
    user_id = update.effective_user.id
    profile = user_profiles.get(user_id, 'it')  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

    matching_cities = [
        city for city, info in city_data.items()
        if info["–æ–∫—Ä—É–≥"] == selected_region and profile in info["–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
    ]

    if matching_cities:
        reply_text = "–ì–æ—Ä–æ–¥–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–±–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–∫—Ä—É–≥–µ:\n"
        for city in matching_cities:
            info = city_data[city]
            reply_text += f"\n{city}: {info['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n–í—É–∑—ã: {', '.join([v['–Ω–∞–∑–≤–∞–Ω–∏–µ'] for v in info['–≤—É–∑—ã']])}\n"
        await update.message.reply_text(reply_text)
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –æ–∫—Ä—É–≥–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, question1)],
            QUESTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, question2)],
            QUESTION3: [MessageHandler(filters.TEXT & ~filters.COMMAND, question3)],
            SELECT_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_region)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.run_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN, webhook_url=webhook_url)

if __name__ == "__main__":
    main()
