import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
PORT = int(os.environ.get('PORT', '8443'))
webhook_url = os.environ.get("WEBHOOK_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not found in environment variables.")

if not webhook_url:
    raise ValueError("WEBHOOK_URL is not found in environment variables.")

# –≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∞
(QUESTION1, QUESTION2, QUESTION3, SELECT_REGION, SELECT_CITY) = range(5)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_scores = {}

# –í–æ–ø—Ä–æ—Å—ã
questions = [
    {
        "q": "üî• –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "options": [
            {"text": "–ß–∏—Ç–∞—é –ø—Ä–æ —Ç–µ–ª–æ, –∑–¥–æ—Ä–æ–≤—å–µ, –±–æ–ª–µ–∑–Ω–∏ (–¥–∞, –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)", "score": "med"},
            {"text": "–ü–∏—à—É, —Ä–∏—Å—É—é, –º–æ–Ω—Ç–∏—Ä—É—é ‚Äî –ª—é–±–ª—é –∫—Ä–µ–∞—Ç–∏–≤", "score": "art"},
            {"text": "–ò—â—É, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–µ–º–∞—Ö", "score": "biz"},
            {"text": "–†–∞–∑–±–∏—Ä–∞—é –≥–∞–¥–∂–µ—Ç—ã –∏–ª–∏ –∑–∞–ª–∏–ø–∞—é –≤ –∫–æ–¥", "score": "it"},
            {"text": "–õ—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –∏ —Ä–∞–∑—Ä—É–ª–∏–≤–∞—Ç—å —á—É–∂–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "score": "soc"}
        ]
    },
    {
        "q": "üí° –¢–≤–æ–π –ª—é–±–∏–º—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?",
        "options": [
            {"text": "–ë–∏–æ–ª–æ–≥–∏—è/–•–∏–º–∏—è", "score": "med"},
            {"text": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞/–ò–ó–û", "score": "art"},
            {"text": "–û–±—â–µ—Å—Ç–≤–æ/–≠–∫–æ–Ω–æ–º–∏–∫–∞", "score": "biz"},
            {"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞/–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "score": "it"},
            {"text": "–ò—Å—Ç–æ—Ä–∏—è/–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "score": "soc"}
        ]
    },
    {
        "q": "üì¶ –ß—Ç–æ —Ç–µ–±–µ –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?",
        "options": [
            {"text": "–ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "score": "med"},
            {"text": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "score": "art"},
            {"text": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "score": "biz"},
            {"text": "–†–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏", "score": "it"},
            {"text": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "score": "soc"}
        ]
    },
    {
        "q": "üß† –¢—ã —Å–∫–æ—Ä–µ–µ...",
        "options": [
            {"text": "–ê–Ω–∞–ª–∏—Ç–∏–∫, –ª—é–±–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª—è—Ö", "score": "it"},
            {"text": "–≠–º–ø–∞—Ç, —á—É–≤—Å—Ç–≤—É—é –¥—Ä—É–≥–∏—Ö", "score": "med"},
            {"text": "–ö—Ä–µ–∞—Ç–æ—Ä, –≤—Å–µ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—é", "score": "art"},
            {"text": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –ª—é–±–ª—é –ø–ª–∞–Ω –∏ –ø–æ—Ä—è–¥–æ–∫", "score": "biz"},
            {"text": "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π, —Å –∫–µ–º —É–≥–æ–¥–Ω–æ –Ω–∞–π–¥—É –æ–±—â–∏–π —è–∑—ã–∫", "score": "soc"}
        ]
    }
]

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def send_greeting(update, user_id):
    try:
        greeting_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üéØ –î—É–º–∞–ª(–∞) –æ –í–£–ó–µ, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å,"
            "–∞ —Å –≥–æ—Ä–æ–¥–æ–º —Ä–µ—à–∏–ª(–∞)?\n –î–∞–≤–∞–π, –º—ã —Ç–µ–±—è –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ —Å–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º üòâ\n"
            "–ü—Ä–æ–π–¥–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –≤–æ –≤–∑—Ä–æ—Å–ª–æ–º –º–∏—Ä–µ!\n\n"
        )

        message_text = (
            greeting_text +
            f"–í–æ–ø—Ä–æ—Å 1: {questions[0]['q']}\n"
            f"1 ‚Äî {questions[0]['options'][0]['text']}\n"
            f"2 ‚Äî {questions[0]['options'][1]['text']}\n"
            f"3 ‚Äî {questions[0]['options'][2]['text']}\n"
            f"4 ‚Äî {questions[0]['options'][3]['text']}\n"
            f"5 ‚Äî {questions[0]['options'][4]['text']}"
        )

        await update.message.reply_text(message_text)
        return QUESTION1
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        raise

# üîπ –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_id not in user_scores:
        user_scores[user_id] = {
            "med": 0,
            "art": 0,
            "biz": 0,
            "it": 0,
            "soc": 0
        }

    return await send_greeting(update, user_id)

# üîπ –í–æ–ø—Ä–æ—Å—ã
async def question1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å 2: {questions[1]['q']}\n"
        f"1 ‚Äî {questions[1]['options'][0]['text']}\n"
        f"2 ‚Äî {questions[1]['options'][1]['text']}\n"
        f"3 ‚Äî {questions[1]['options'][2]['text']}\n"
        f"4 ‚Äî {questions[1]['options'][3]['text']}\n"
        f"5 ‚Äî {questions[1]['options'][4]['text']}"
    )
    return QUESTION2

async def question2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å 3: {questions[2]['q']}\n"
        f"1 ‚Äî {questions[2]['options'][0]['text']}\n"
        f"2 ‚Äî {questions[2]['options'][1]['text']}\n"
        f"3 ‚Äî {questions[2]['options'][2]['text']}\n"
        f"4 ‚Äî {questions[2]['options'][3]['text']}\n"
        f"5 ‚Äî {questions[2]['options'][4]['text']}"
    )
    return QUESTION3

async def question3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å 4: {questions[3]['q']}\n"
        f"1 ‚Äî {questions[3]['options'][0]['text']}\n"
        f"2 ‚Äî {questions[3]['options'][1]['text']}\n"
        f"3 ‚Äî {questions[3]['options'][2]['text']}\n"
        f"4 ‚Äî {questions[3]['options'][3]['text']}\n"
        f"5 ‚Äî {questions[3]['options'][4]['text']}"
    )
    return QUESTION4

async def question4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle_answer(update.message.text, update.effective_user.id)
    result = get_result(update.effective_user.id)
    await update.message.reply_text(result)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
def handle_answer(answer_text, user_id):
    answer_map = {
        "1": "med",
        "2": "art",
        "3": "biz",
        "4": "it",
        "5": "soc"
    }

    if user_id not in user_scores:
        user_scores[user_id] = {
            "med": 0,
            "art": 0,
            "biz": 0,
            "it": 0,
            "soc": 0
        }

    if answer_text in answer_map:
        user_scores[user_id][answer_map[answer_text]] += 1

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def get_result(user_id):
    result_map = {
        "med": "üë©‚Äç‚öïÔ∏è –¢–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç –º–µ–¥–∏—Ü–∏–Ω–∞ –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è!\n–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤(–∞), –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω(–Ω–∞) –∏ —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –≤—Ä–∞—á, –ø—Å–∏—Ö–æ–ª–æ–≥, –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥",
        "art": "üé® –¢—ã ‚Äî —Ç–≤–æ—Ä–µ—Ü!\n–£ —Ç–µ–±—è —Ä–∞–∑–≤–∏—Ç –≤–∫—É—Å –∏ –∫—Ä–µ–∞—Ç–∏–≤. –ü–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: –¥–∏–∑–∞–π–Ω–µ—Ä, —Ä–µ–∂–∏—Å—Å—ë—Ä, –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
        "biz": "üìà –ë—É–¥—É—â–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å!\n–¢—ã –ø—Ä–æ –¥–µ–Ω—å–≥–∏, –∏–¥–µ–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –¢–≤–æ–∏ —Å—Ñ–µ—Ä—ã: –±–∏–∑–Ω–µ—Å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–∫–ª–∞–º–∞, —Å—Ç–∞—Ä—Ç–∞–ø—ã",
        "it": "üíª –ê–π—Ç–∏—à–Ω–∏–∫ –≤ –¥—É—à–µ!\n–¢—ã —Ç–æ—á–Ω–æ –Ω–∞–π–¥—ë—à—å —Å–µ–±—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä",
        "soc": "üó£Ô∏è –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä –∏ –ª–∏–¥–µ—Ä))\n–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ–º–∞–Ω–¥—ã. –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞, HR, –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, —Å–æ—Ü. –ø—Ä–æ–µ–∫—Ç—ã ‚Äî —Ç–≤–æ—ë –ø–æ–ª–µ"
    }

    if user_id not in user_scores:
        return "–£–ø—Å, –ø–æ—Ö–æ–∂–µ, —É –Ω–∞—Å –Ω–µ—Ç —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!"

    scores = user_scores[user_id]
    if not scores:
        return "–¢—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"

    top = max(scores, key=scores.get)
    return result_map.get(top, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, question1)],
            QUESTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, question2)],
            QUESTION3: [MessageHandler(filters.TEXT & ~filters.COMMAND, question3)],
            QUESTION4: [MessageHandler(filters.TEXT & ~filters.COMMAND, question4)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url
    )

if __name__ == '__main__':
    main()
