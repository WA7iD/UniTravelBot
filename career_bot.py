import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
PORT = int(os.environ.get('PORT', '8443'))
webhook_url = os.environ.get("WEBHOOK_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ URL
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not found in environment variables.")

if not webhook_url:
    raise ValueError("WEBHOOK_URL is not found in environment variables.")

# –≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∞
QUESTION1, QUESTION2, QUESTION3, QUESTION4 = range(4)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
user_scores = {}

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
questions = [
    {
        "q": "üî• –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "options": [
            {"text": "–ß–∏—Ç–∞—é –ø—Ä–æ —Ç–µ–ª–æ, –∑–¥–æ—Ä–æ–≤—å–µ, –±–æ–ª–µ–∑–Ω–∏ (–¥–∞, –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)", "score": "med"},
            {"text": "–ü–∏—à—É, —Ä–∏—Å—É—é, –º–æ–Ω—Ç–∏—Ä—É—é ‚Äî –ª—é–±–ª—é –∫—Ä–µ–∞—Ç–∏–≤", "score": "art"},
            {"text": "–ò—â—É, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–µ–º–∞—Ö", "score": "biz"},
            {"text": "–†–∞–∑–±–∏—Ä–∞—é –≥–∞–¥–∂–µ—Ç—ã –∏–ª–∏ –∑–∞–ª–∏–ø–∞—é –≤ –∫–æ–¥", "score": "it"},
            {"text": "–õ—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –∏ —Ä–∞–∑—Ä—É–ª–∏–≤–∞—Ç—å —á—É–∂–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "score": "soc"}
        ]
    },
    {
        "q": "üí° –¢–≤–æ–π –ª—é–±–∏–º—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?",
        "options": [
            {"text": "–ë–∏–æ–ª–æ–≥–∏—è/–•–∏–º–∏—è", "score": "med"},
            {"text": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞/–ò–ó–û", "score": "art"},
            {"text": "–û–±—â–µ—Å—Ç–≤–æ/–≠–∫–æ–Ω–æ–º–∏–∫–∞", "score": "biz"},
            {"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞/–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "score": "it"},
            {"text": "–ò—Å—Ç–æ—Ä–∏—è/–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "score": "soc"}
        ]
    },
    {
        "q": "üì¶ –ß—Ç–æ —Ç–µ–±–µ –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?",
        "options": [
            {"text": "–ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "score": "med"},
            {"text": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "score": "art"},
            {"text": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "score": "biz"},
            {"text": "–†–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏", "score": "it"},
            {"text": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "score": "soc"}
        ]
    },
    {
        "q": "üß† –¢—ã —Å–∫–æ—Ä–µ–µ...",
        "options": [
            {"text": "–ê–Ω–∞–ª–∏—Ç–∏–∫, –ª—é–±–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª—è—Ö", "score": "it"},
            {"text": "–≠–º–ø–∞—Ç, —á—É–≤—Å—Ç–≤—É—é –¥—Ä—É–≥–∏—Ö", "score": "med"},
            {"text": "–ö—Ä–µ–∞—Ç–æ—Ä, –≤—Å–µ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—é", "score": "art"},
            {"text": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –ª—é–±–ª—é –ø–ª–∞–Ω –∏ –ø–æ—Ä—è–¥–æ–∫", "score": "biz"},
            {"text": "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π, —Å –∫–µ–º —É–≥–æ–¥–Ω–æ –Ω–∞–π–¥—É –æ–±—â–∏–π —è–∑—ã–∫", "score": "soc"}
        ]
    }
]

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_scores[user_id] = {"med": 0, "art": 0, "biz": 0, "it": 0, "soc": 0}

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(option["text"], callback_data=option["score"]) for option in questions[0]["options"]]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üéØ –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n"
        f"–í–æ–ø—Ä–æ—Å 1: {questions[0]['q']}",
        reply_markup=reply_markup
    )
    return QUESTION1

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = query.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (score)
    user_scores[user_id][score] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question = len(user_scores[user_id]) - 1
    if next_question < len(questions):
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ
        keyboard = [
            [InlineKeyboardButton(option["text"], callback_data=option["score"])]
            for option in questions[next_question]["options"]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"–í–æ–ø—Ä–æ—Å {next_question + 1}: {questions[next_question]['q']}",
            reply_markup=reply_markup
        )
    else:
        result = get_result(user_id)
        await query.edit_message_text(text=result)
        return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def get_result(user_id):
    result_map = {
        "med": "üë©‚Äç‚öïÔ∏è –¢–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç –º–µ–¥–∏—Ü–∏–Ω–∞ –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è! –¢—ã –∑–∞–±–æ—Ç–ª–∏–≤(–∞), –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω(–Ω–∞) –∏ —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –≤—Ä–∞—á, –ø—Å–∏—Ö–æ–ª–æ–≥, –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥",
        "art": "üé® –¢—ã ‚Äî —Ç–≤–æ—Ä–µ—Ü! –£ —Ç–µ–±—è —Ä–∞–∑–≤–∏—Ç –≤–∫—É—Å –∏ –∫—Ä–µ–∞—Ç–∏–≤. –ü–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: –¥–∏–∑–∞–π–Ω–µ—Ä, —Ä–µ–∂–∏—Å—Å—ë—Ä, –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
        "biz": "üìà –ë—É–¥—É—â–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å! –¢—ã –ø—Ä–æ –¥–µ–Ω—å–≥–∏, –∏–¥–µ–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –¢–≤–æ–∏ —Å—Ñ–µ—Ä—ã: –±–∏–∑–Ω–µ—Å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–∫–ª–∞–º–∞, —Å—Ç–∞—Ä—Ç–∞–ø—ã",
        "it": "üíª –ê–π—Ç–∏—à–Ω–∏–∫ –≤ –¥—É—à–µ! –¢—ã —Ç–æ—á–Ω–æ –Ω–∞–π–¥—ë—à—å —Å–µ–±—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä",
        "soc": "üó£Ô∏è –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä –∏ –ª–∏–¥–µ—Ä)) –¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ–º–∞–Ω–¥—ã. –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞, HR, –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, —Å–æ—Ü. –ø—Ä–æ–µ–∫—Ç—ã ‚Äî —Ç–≤–æ—ë –ø–æ–ª–µ"
    }
    scores = user_scores[user_id]
    top = max(scores, key=scores.get)
    return result_map[top]

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [CallbackQueryHandler(handle_answer)],
            QUESTION2: [CallbackQueryHandler(handle_answer)],
            QUESTION3: [CallbackQueryHandler(handle_answer)],
            QUESTION4: [CallbackQueryHandler(handle_answer)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook (–¥–ª—è Render)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url
    )

if __name__ == '__main__':
    main()
