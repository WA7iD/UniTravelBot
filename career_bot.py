from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# –°—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏—à—å —É @BotFather
TOKEN = 'YOUR_BOT_TOKEN'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
START, QUESTION1, QUESTION2, QUESTION3, RESULT = range(5)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
user_scores = {"med": 0, "art": 0, "biz": 0, "it": 0, "soc": 0}

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
def start(update: Update, context: CallbackContext) -> int:
    user_scores.update({"med": 0, "art": 0, "biz": 0, "it": 0, "soc": 0})
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üéØ –ü—Ä–æ–π–¥–∏ –Ω–∞—à —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n\n–ù–∞—á–Ω–µ–º?"
    )
    return QUESTION1

# –í–æ–ø—Ä–æ—Å—ã
def question1(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üî• –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?\n1. –ß–∏—Ç–∞—é –ø—Ä–æ –∑–¥–æ—Ä–æ–≤—å–µ\n2. –†–∏—Å—É—é/–º–æ–Ω—Ç–∏—Ä—É—é\n3. –ò—Å–∫–∞—Ç—å, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\n4. –†–∞–∑–±–∏—Ä–∞—é –≥–∞–¥–∂–µ—Ç—ã\n5. –û–±—â–∞—é—Å—å —Å –ª—é–¥—å–º–∏")
    return QUESTION2

def question2(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üí° –¢–≤–æ–π –ª—é–±–∏–º—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?\n1. –ë–∏–æ–ª–æ–≥–∏—è\n2. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞/–ò–ó–û\n3. –≠–∫–æ–Ω–æ–º–∏–∫–∞\n4. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n5. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è")
    return QUESTION3

def question3(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üì¶ –ß—Ç–æ —Ç–µ–±–µ –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?\n1. –ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º\n2. –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ\n3. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å\n4. –†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏\n5. –û–±—â–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏")
    return RESULT

# –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def calculate_result(update: Update, context: CallbackContext) -> int:
    answer = update.message.text.lower()
    
    if "1" in answer:
        user_scores["med"] += 1
    elif "2" in answer:
        user_scores["art"] += 1
    elif "3" in answer:
        user_scores["biz"] += 1
    elif "4" in answer:
        user_scores["it"] += 1
    elif "5" in answer:
        user_scores["soc"] += 1

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
    top = max(user_scores, key=user_scores.get)

    if top == "med":
        result_text = "–¢—ã –ø–æ–¥–æ–π–¥–µ—à—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö."
    elif top == "art":
        result_text = "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –¥–∏–∑–∞–π–Ω–µ, –º—É–∑—ã–∫–µ, –∫–∏–Ω–æ."
    elif top == "biz":
        result_text = "–¢—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É—Å–ø–µ—Ö –≤ –±–∏–∑–Ω–µ—Å–µ. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ —Å—Ç–∞—Ä—Ç–∞–ø–∞—Ö, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ ‚Äî —Ç–≤–æ–∏!"
    elif top == "it":
        result_text = "–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ IT-—Å—Ñ–µ—Ä–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–æ—Ç —Ç–≤–æ—ë!"
    elif top == "soc":
        result_text = "–¢–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, HR."

    update.message.reply_text(result_text)
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
def main() -> None:
    updater = Updater(TOKEN)

    dispatcher = updater.dispatcher

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [MessageHandler(Filters.text & ~Filters.command, question1)],
            QUESTION2: [MessageHandler(Filters.text & ~Filters.command, question2)],
            QUESTION3: [MessageHandler(Filters.text & ~Filters.command, question3)],
            RESULT: [MessageHandler(Filters.text & ~Filters.command, calculate_result)],
        },
        fallbacks=[],
    )

    dispatcher.add_handler(conversation_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
